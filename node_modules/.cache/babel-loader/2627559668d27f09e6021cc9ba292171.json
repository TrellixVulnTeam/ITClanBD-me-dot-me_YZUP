{"ast":null,"code":"var _jsxFileName = \"D:\\\\me-dot-me\\\\src\\\\components\\\\Practice\\\\Accordion.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AccordionAPI } from \"./AccordionAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AcHeading = {\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\"\n};\nexport const AccordionJS = () => {\n  _s();\n\n  const [Question, setQuestion] = useState(AccordionAPI);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Question.map(ce => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            style: AcHeading,\n            children: [ce.heading, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 60\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }, this)\n        }, ce.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this)\n      }, ce.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false); // const [show, setshow] = useState(\"false\");\n  // return(\n  //     <>\n  //     {AccordionAPI.map((val) => (            \n  //         <div key={val.id} id={val.id}>            \n  //             <h3 style={AcHeading}>{val.heading}<span onClick={(e) => setshow(!show)}>{!show ? \"-\" : \"+\"}</span></h3>\n  //             {!show && <p>{val.text}</p>}\n  //         </div>  \n  //     ))}\n  //     </>\n  // )\n};\n\n_s(AccordionJS, \"IFvl1mPVZvD6TWCTXa8/JoGBSKw=\");\n\n_c = AccordionJS;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccordionJS\");","map":{"version":3,"sources":["D:/me-dot-me/src/components/Practice/Accordion.js"],"names":["React","useState","AccordionAPI","AcHeading","display","justifyContent","alignItems","AccordionJS","Question","setQuestion","map","ce","heading","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;;;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAE,MADK;AAEdC,EAAAA,cAAc,EAAE,eAFF;AAGdC,EAAAA,UAAU,EAAE;AAHE,CAAlB;AAMA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACC,YAAD,CAAxC;AAEA,sBAAO;AAAA,cAIFM,QAAQ,CAACE,GAAT,CAAcC,EAAD,IAAQ;AAClB,0BACI;AAAA,+BACI;AAAA,iCACI;AAAI,YAAA,KAAK,EAAER,SAAX;AAAA,uBAAuBQ,EAAE,CAACC,OAA1B,oBAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,WAAUD,EAAE,CAACE,EAAb;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUF,EAAE,CAACE,EAAb;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KARA;AAJE,mBAAP,CAH6B,CAoB7B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAjCM;;GAAMN,W;;KAAAA,W","sourcesContent":["import React, {useState} from \"react\";\r\nimport {AccordionAPI} from \"./AccordionAPI\"\r\n\r\n\r\nconst AcHeading = {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n}\r\n\r\nexport const AccordionJS = () => {\r\n    const [Question, setQuestion] = useState(AccordionAPI);\r\n\r\n    return(<>\r\n        {/* <h2>asdasdfas chart apex jquery-chart</h2> */}\r\n\r\n\r\n        {Question.map((ce) => {\r\n            return (\r\n                <div key={ce.id}>\r\n                    <div key={ce.id}>\r\n                        <h2 style={AcHeading}>{ce.heading} <span>+</span></h2>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })}\r\n\r\n    </>)\r\n\r\n\r\n    // const [show, setshow] = useState(\"false\");\r\n\r\n    \r\n    // return(\r\n    //     <>\r\n    //     {AccordionAPI.map((val) => (            \r\n    //         <div key={val.id} id={val.id}>            \r\n    //             <h3 style={AcHeading}>{val.heading}<span onClick={(e) => setshow(!show)}>{!show ? \"-\" : \"+\"}</span></h3>\r\n    //             {!show && <p>{val.text}</p>}\r\n    //         </div>  \r\n    //     ))}\r\n    //     </>\r\n    // )\r\n}"]},"metadata":{},"sourceType":"module"}